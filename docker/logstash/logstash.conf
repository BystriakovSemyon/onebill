input {
  http {
    port => 9253
    max_content_length => 5242880
    request_headers_target_field => "req_headers"
    remote_host_target_field => "application_host"
    add_field => {
      "source" => "http_request"
    }
  }
  gelf {}
}

filter {
  # Add current timestamp if it no present
  if (![@timestamp]){
    ruby {
      init => "require 'time'"
      code => "event.set('@timestamp', Time.now())"
    }
  }
  if "app" in [tags] {
    if [body] {
      mutate {
        rename => { "body" => "message" }
      }
    }
    mutate {
      rename => { "[headers][app_id]" => "app_id" }
      rename => { "[headers][type_id]" => "type_id" }
      rename => { "[headers][timestamp]" => "event_timestamp" }
    }
  }
  mutate {
    remove_field => ["[context][elasticResponse]", "[context][nodeResponse]"]
  }
  ruby {
    code => "
      event.set('[metrics][message_length]', event.get('message').length)
    "
  }
  mutate {
    add_field => {
      "[metrics][message_bytesize]" => "%{[req_headers][content_length]}"
    }
  }
  mutate {
    convert => { "[metrics][message_bytesize]" => "integer" }
  }
  if [metrics][message_bytesize] > 5191680 {
    mutate {
      add_tag => ["long_message"]
    }
  }
  if "audit" in [tag] {
    mutate {
      add_field => { "type_id" => "audit" }
    }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logs"
    manage_template => "false"
  }
}
